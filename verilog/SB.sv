// Generated by CIRCT firtool-1.58.0
module SB(
  input         clock,
                reset,
                io_is_store_ex,
  input  [31:0] io_addr_ex,
                io_st_data_ex,
  input  [2:0]  io_st_wlen_ex,
  output        io_full,
  input  [1:0]  io_is_store_num_cmt,
  output        io_is_store_cmt,
  output [31:0] io_st_addr_cmt,
                io_st_data_cmt,
  output [2:0]  io_st_wlen_cmt,
  input         io_flush,
  output [31:0] io_ld_data_ex,
  output        io_ld_hit
);

  reg  [31:0] casez_tmp;
  reg  [31:0] casez_tmp_0;
  reg  [2:0]  casez_tmp_1;
  reg  [31:0] casez_tmp_2;
  reg  [2:0]  casez_tmp_3;
  reg  [31:0] casez_tmp_4;
  reg  [2:0]  casez_tmp_5;
  reg  [31:0] casez_tmp_6;
  reg  [31:0] casez_tmp_7;
  reg  [2:0]  casez_tmp_8;
  reg  [31:0] casez_tmp_9;
  reg  [31:0] casez_tmp_10;
  reg  [2:0]  casez_tmp_11;
  reg  [31:0] casez_tmp_12;
  reg  [31:0] casez_tmp_13;
  reg  [2:0]  casez_tmp_14;
  reg  [31:0] casez_tmp_15;
  reg  [31:0] casez_tmp_16;
  reg  [2:0]  casez_tmp_17;
  reg  [31:0] casez_tmp_18;
  reg  [31:0] casez_tmp_19;
  reg  [2:0]  casez_tmp_20;
  reg  [31:0] casez_tmp_21;
  reg  [31:0] casez_tmp_22;
  reg  [2:0]  casez_tmp_23;
  reg  [31:0] casez_tmp_24;
  reg  [31:0] casez_tmp_25;
  reg  [31:0] casez_tmp_26;
  reg  [31:0] casez_tmp_27;
  reg  [31:0] casez_tmp_28;
  reg  [31:0] casez_tmp_29;
  reg  [31:0] casez_tmp_30;
  reg  [31:0] casez_tmp_31;
  reg  [31:0] casez_tmp_32;
  reg  [31:0] casez_tmp_33;
  reg  [31:0] sb_0_addr;
  reg  [31:0] sb_0_data;
  reg  [2:0]  sb_0_wlen;
  reg  [31:0] sb_1_addr;
  reg  [31:0] sb_1_data;
  reg  [2:0]  sb_1_wlen;
  reg  [31:0] sb_2_addr;
  reg  [31:0] sb_2_data;
  reg  [2:0]  sb_2_wlen;
  reg  [31:0] sb_3_addr;
  reg  [31:0] sb_3_data;
  reg  [2:0]  sb_3_wlen;
  reg  [31:0] sb_4_addr;
  reg  [31:0] sb_4_data;
  reg  [2:0]  sb_4_wlen;
  reg  [31:0] sb_5_addr;
  reg  [31:0] sb_5_data;
  reg  [2:0]  sb_5_wlen;
  reg  [31:0] sb_6_addr;
  reg  [31:0] sb_6_data;
  reg  [2:0]  sb_6_wlen;
  reg  [31:0] sb_7_addr;
  reg  [31:0] sb_7_data;
  reg  [2:0]  sb_7_wlen;
  reg  [3:0]  head;
  reg  [3:0]  tail;
  reg  [3:0]  elem_num;
  reg         flush_buf;
  wire        full = elem_num == 4'h8 | flush_buf;
  reg  [2:0]  wait_to_cmt;
  wire        _io_is_store_cmt_output = (|wait_to_cmt) | (|io_is_store_num_cmt);
  always_comb begin
    casez (head[2:0])
      3'b000:
        casez_tmp = sb_0_addr;
      3'b001:
        casez_tmp = sb_1_addr;
      3'b010:
        casez_tmp = sb_2_addr;
      3'b011:
        casez_tmp = sb_3_addr;
      3'b100:
        casez_tmp = sb_4_addr;
      3'b101:
        casez_tmp = sb_5_addr;
      3'b110:
        casez_tmp = sb_6_addr;
      default:
        casez_tmp = sb_7_addr;
    endcase
  end // always_comb
  always_comb begin
    casez (head[2:0])
      3'b000:
        casez_tmp_0 = sb_0_data;
      3'b001:
        casez_tmp_0 = sb_1_data;
      3'b010:
        casez_tmp_0 = sb_2_data;
      3'b011:
        casez_tmp_0 = sb_3_data;
      3'b100:
        casez_tmp_0 = sb_4_data;
      3'b101:
        casez_tmp_0 = sb_5_data;
      3'b110:
        casez_tmp_0 = sb_6_data;
      default:
        casez_tmp_0 = sb_7_data;
    endcase
  end // always_comb
  always_comb begin
    casez (head[2:0])
      3'b000:
        casez_tmp_1 = sb_0_wlen;
      3'b001:
        casez_tmp_1 = sb_1_wlen;
      3'b010:
        casez_tmp_1 = sb_2_wlen;
      3'b011:
        casez_tmp_1 = sb_3_wlen;
      3'b100:
        casez_tmp_1 = sb_4_wlen;
      3'b101:
        casez_tmp_1 = sb_5_wlen;
      3'b110:
        casez_tmp_1 = sb_6_wlen;
      default:
        casez_tmp_1 = sb_7_wlen;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0])
      3'b000:
        casez_tmp_2 = sb_0_addr;
      3'b001:
        casez_tmp_2 = sb_1_addr;
      3'b010:
        casez_tmp_2 = sb_2_addr;
      3'b011:
        casez_tmp_2 = sb_3_addr;
      3'b100:
        casez_tmp_2 = sb_4_addr;
      3'b101:
        casez_tmp_2 = sb_5_addr;
      3'b110:
        casez_tmp_2 = sb_6_addr;
      default:
        casez_tmp_2 = sb_7_addr;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0])
      3'b000:
        casez_tmp_3 = sb_0_wlen;
      3'b001:
        casez_tmp_3 = sb_1_wlen;
      3'b010:
        casez_tmp_3 = sb_2_wlen;
      3'b011:
        casez_tmp_3 = sb_3_wlen;
      3'b100:
        casez_tmp_3 = sb_4_wlen;
      3'b101:
        casez_tmp_3 = sb_5_wlen;
      3'b110:
        casez_tmp_3 = sb_6_wlen;
      default:
        casez_tmp_3 = sb_7_wlen;
    endcase
  end // always_comb
  wire [38:0] _GEN = {7'h0, io_addr_ex};
  wire        ld_hit_0 =
    casez_tmp_2 <= io_addr_ex & _GEN < {7'h0, casez_tmp_2} + (39'h1 << casez_tmp_3)
    & (head[3] ^ tail[3]) & tail[2:0] >= head[2:0];
  always_comb begin
    casez (tail[2:0] - 3'h1)
      3'b000:
        casez_tmp_4 = sb_0_addr;
      3'b001:
        casez_tmp_4 = sb_1_addr;
      3'b010:
        casez_tmp_4 = sb_2_addr;
      3'b011:
        casez_tmp_4 = sb_3_addr;
      3'b100:
        casez_tmp_4 = sb_4_addr;
      3'b101:
        casez_tmp_4 = sb_5_addr;
      3'b110:
        casez_tmp_4 = sb_6_addr;
      default:
        casez_tmp_4 = sb_7_addr;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] - 3'h1)
      3'b000:
        casez_tmp_5 = sb_0_wlen;
      3'b001:
        casez_tmp_5 = sb_1_wlen;
      3'b010:
        casez_tmp_5 = sb_2_wlen;
      3'b011:
        casez_tmp_5 = sb_3_wlen;
      3'b100:
        casez_tmp_5 = sb_4_wlen;
      3'b101:
        casez_tmp_5 = sb_5_wlen;
      3'b110:
        casez_tmp_5 = sb_6_wlen;
      default:
        casez_tmp_5 = sb_7_wlen;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] - 3'h1)
      3'b000:
        casez_tmp_6 = sb_0_addr;
      3'b001:
        casez_tmp_6 = sb_1_addr;
      3'b010:
        casez_tmp_6 = sb_2_addr;
      3'b011:
        casez_tmp_6 = sb_3_addr;
      3'b100:
        casez_tmp_6 = sb_4_addr;
      3'b101:
        casez_tmp_6 = sb_5_addr;
      3'b110:
        casez_tmp_6 = sb_6_addr;
      default:
        casez_tmp_6 = sb_7_addr;
    endcase
  end // always_comb
  wire        ld_hit_1 =
    casez_tmp_4 <= io_addr_ex & _GEN < {7'h0, casez_tmp_6} + (39'h1 << casez_tmp_5)
    & (head[3] ^ tail[3]
         ? tail[2:0] - 3'h1 >= head[2:0] | tail[2:0] - 3'h1 < tail[2:0]
         : tail[2:0] - 3'h1 >= head[2:0] & tail[2:0] - 3'h1 < tail[2:0]);
  always_comb begin
    casez (tail[2:0] - 3'h2)
      3'b000:
        casez_tmp_7 = sb_0_addr;
      3'b001:
        casez_tmp_7 = sb_1_addr;
      3'b010:
        casez_tmp_7 = sb_2_addr;
      3'b011:
        casez_tmp_7 = sb_3_addr;
      3'b100:
        casez_tmp_7 = sb_4_addr;
      3'b101:
        casez_tmp_7 = sb_5_addr;
      3'b110:
        casez_tmp_7 = sb_6_addr;
      default:
        casez_tmp_7 = sb_7_addr;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] - 3'h2)
      3'b000:
        casez_tmp_8 = sb_0_wlen;
      3'b001:
        casez_tmp_8 = sb_1_wlen;
      3'b010:
        casez_tmp_8 = sb_2_wlen;
      3'b011:
        casez_tmp_8 = sb_3_wlen;
      3'b100:
        casez_tmp_8 = sb_4_wlen;
      3'b101:
        casez_tmp_8 = sb_5_wlen;
      3'b110:
        casez_tmp_8 = sb_6_wlen;
      default:
        casez_tmp_8 = sb_7_wlen;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] - 3'h2)
      3'b000:
        casez_tmp_9 = sb_0_addr;
      3'b001:
        casez_tmp_9 = sb_1_addr;
      3'b010:
        casez_tmp_9 = sb_2_addr;
      3'b011:
        casez_tmp_9 = sb_3_addr;
      3'b100:
        casez_tmp_9 = sb_4_addr;
      3'b101:
        casez_tmp_9 = sb_5_addr;
      3'b110:
        casez_tmp_9 = sb_6_addr;
      default:
        casez_tmp_9 = sb_7_addr;
    endcase
  end // always_comb
  wire        ld_hit_2 =
    casez_tmp_7 <= io_addr_ex & _GEN < {7'h0, casez_tmp_9} + (39'h1 << casez_tmp_8)
    & (head[3] ^ tail[3]
         ? tail[2:0] - 3'h2 >= head[2:0] | tail[2:0] - 3'h2 < tail[2:0]
         : tail[2:0] - 3'h2 >= head[2:0] & tail[2:0] - 3'h2 < tail[2:0]);
  always_comb begin
    casez (tail[2:0] - 3'h3)
      3'b000:
        casez_tmp_10 = sb_0_addr;
      3'b001:
        casez_tmp_10 = sb_1_addr;
      3'b010:
        casez_tmp_10 = sb_2_addr;
      3'b011:
        casez_tmp_10 = sb_3_addr;
      3'b100:
        casez_tmp_10 = sb_4_addr;
      3'b101:
        casez_tmp_10 = sb_5_addr;
      3'b110:
        casez_tmp_10 = sb_6_addr;
      default:
        casez_tmp_10 = sb_7_addr;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] - 3'h3)
      3'b000:
        casez_tmp_11 = sb_0_wlen;
      3'b001:
        casez_tmp_11 = sb_1_wlen;
      3'b010:
        casez_tmp_11 = sb_2_wlen;
      3'b011:
        casez_tmp_11 = sb_3_wlen;
      3'b100:
        casez_tmp_11 = sb_4_wlen;
      3'b101:
        casez_tmp_11 = sb_5_wlen;
      3'b110:
        casez_tmp_11 = sb_6_wlen;
      default:
        casez_tmp_11 = sb_7_wlen;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] - 3'h3)
      3'b000:
        casez_tmp_12 = sb_0_addr;
      3'b001:
        casez_tmp_12 = sb_1_addr;
      3'b010:
        casez_tmp_12 = sb_2_addr;
      3'b011:
        casez_tmp_12 = sb_3_addr;
      3'b100:
        casez_tmp_12 = sb_4_addr;
      3'b101:
        casez_tmp_12 = sb_5_addr;
      3'b110:
        casez_tmp_12 = sb_6_addr;
      default:
        casez_tmp_12 = sb_7_addr;
    endcase
  end // always_comb
  wire        ld_hit_3 =
    casez_tmp_10 <= io_addr_ex & _GEN < {7'h0, casez_tmp_12} + (39'h1 << casez_tmp_11)
    & (head[3] ^ tail[3]
         ? tail[2:0] - 3'h3 >= head[2:0] | tail[2:0] - 3'h3 < tail[2:0]
         : tail[2:0] - 3'h3 >= head[2:0] & tail[2:0] - 3'h3 < tail[2:0]);
  always_comb begin
    casez (tail[2:0] - 3'h4)
      3'b000:
        casez_tmp_13 = sb_0_addr;
      3'b001:
        casez_tmp_13 = sb_1_addr;
      3'b010:
        casez_tmp_13 = sb_2_addr;
      3'b011:
        casez_tmp_13 = sb_3_addr;
      3'b100:
        casez_tmp_13 = sb_4_addr;
      3'b101:
        casez_tmp_13 = sb_5_addr;
      3'b110:
        casez_tmp_13 = sb_6_addr;
      default:
        casez_tmp_13 = sb_7_addr;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] - 3'h4)
      3'b000:
        casez_tmp_14 = sb_0_wlen;
      3'b001:
        casez_tmp_14 = sb_1_wlen;
      3'b010:
        casez_tmp_14 = sb_2_wlen;
      3'b011:
        casez_tmp_14 = sb_3_wlen;
      3'b100:
        casez_tmp_14 = sb_4_wlen;
      3'b101:
        casez_tmp_14 = sb_5_wlen;
      3'b110:
        casez_tmp_14 = sb_6_wlen;
      default:
        casez_tmp_14 = sb_7_wlen;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] - 3'h4)
      3'b000:
        casez_tmp_15 = sb_0_addr;
      3'b001:
        casez_tmp_15 = sb_1_addr;
      3'b010:
        casez_tmp_15 = sb_2_addr;
      3'b011:
        casez_tmp_15 = sb_3_addr;
      3'b100:
        casez_tmp_15 = sb_4_addr;
      3'b101:
        casez_tmp_15 = sb_5_addr;
      3'b110:
        casez_tmp_15 = sb_6_addr;
      default:
        casez_tmp_15 = sb_7_addr;
    endcase
  end // always_comb
  wire        ld_hit_4 =
    casez_tmp_13 <= io_addr_ex & _GEN < {7'h0, casez_tmp_15} + (39'h1 << casez_tmp_14)
    & (head[3] ^ tail[3]
         ? tail[2:0] - 3'h4 >= head[2:0] | tail[2:0] - 3'h4 < tail[2:0]
         : tail[2:0] - 3'h4 >= head[2:0] & tail[2:0] - 3'h4 < tail[2:0]);
  always_comb begin
    casez (tail[2:0] + 3'h3)
      3'b000:
        casez_tmp_16 = sb_0_addr;
      3'b001:
        casez_tmp_16 = sb_1_addr;
      3'b010:
        casez_tmp_16 = sb_2_addr;
      3'b011:
        casez_tmp_16 = sb_3_addr;
      3'b100:
        casez_tmp_16 = sb_4_addr;
      3'b101:
        casez_tmp_16 = sb_5_addr;
      3'b110:
        casez_tmp_16 = sb_6_addr;
      default:
        casez_tmp_16 = sb_7_addr;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] + 3'h3)
      3'b000:
        casez_tmp_17 = sb_0_wlen;
      3'b001:
        casez_tmp_17 = sb_1_wlen;
      3'b010:
        casez_tmp_17 = sb_2_wlen;
      3'b011:
        casez_tmp_17 = sb_3_wlen;
      3'b100:
        casez_tmp_17 = sb_4_wlen;
      3'b101:
        casez_tmp_17 = sb_5_wlen;
      3'b110:
        casez_tmp_17 = sb_6_wlen;
      default:
        casez_tmp_17 = sb_7_wlen;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] + 3'h3)
      3'b000:
        casez_tmp_18 = sb_0_addr;
      3'b001:
        casez_tmp_18 = sb_1_addr;
      3'b010:
        casez_tmp_18 = sb_2_addr;
      3'b011:
        casez_tmp_18 = sb_3_addr;
      3'b100:
        casez_tmp_18 = sb_4_addr;
      3'b101:
        casez_tmp_18 = sb_5_addr;
      3'b110:
        casez_tmp_18 = sb_6_addr;
      default:
        casez_tmp_18 = sb_7_addr;
    endcase
  end // always_comb
  wire        ld_hit_5 =
    casez_tmp_16 <= io_addr_ex & _GEN < {7'h0, casez_tmp_18} + (39'h1 << casez_tmp_17)
    & (head[3] ^ tail[3]
         ? tail[2:0] + 3'h3 >= head[2:0] | tail[2:0] + 3'h3 < tail[2:0]
         : tail[2:0] + 3'h3 >= head[2:0] & tail[2:0] + 3'h3 < tail[2:0]);
  always_comb begin
    casez (tail[2:0] + 3'h2)
      3'b000:
        casez_tmp_19 = sb_0_addr;
      3'b001:
        casez_tmp_19 = sb_1_addr;
      3'b010:
        casez_tmp_19 = sb_2_addr;
      3'b011:
        casez_tmp_19 = sb_3_addr;
      3'b100:
        casez_tmp_19 = sb_4_addr;
      3'b101:
        casez_tmp_19 = sb_5_addr;
      3'b110:
        casez_tmp_19 = sb_6_addr;
      default:
        casez_tmp_19 = sb_7_addr;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] + 3'h2)
      3'b000:
        casez_tmp_20 = sb_0_wlen;
      3'b001:
        casez_tmp_20 = sb_1_wlen;
      3'b010:
        casez_tmp_20 = sb_2_wlen;
      3'b011:
        casez_tmp_20 = sb_3_wlen;
      3'b100:
        casez_tmp_20 = sb_4_wlen;
      3'b101:
        casez_tmp_20 = sb_5_wlen;
      3'b110:
        casez_tmp_20 = sb_6_wlen;
      default:
        casez_tmp_20 = sb_7_wlen;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] + 3'h2)
      3'b000:
        casez_tmp_21 = sb_0_addr;
      3'b001:
        casez_tmp_21 = sb_1_addr;
      3'b010:
        casez_tmp_21 = sb_2_addr;
      3'b011:
        casez_tmp_21 = sb_3_addr;
      3'b100:
        casez_tmp_21 = sb_4_addr;
      3'b101:
        casez_tmp_21 = sb_5_addr;
      3'b110:
        casez_tmp_21 = sb_6_addr;
      default:
        casez_tmp_21 = sb_7_addr;
    endcase
  end // always_comb
  wire        ld_hit_6 =
    casez_tmp_19 <= io_addr_ex & _GEN < {7'h0, casez_tmp_21} + (39'h1 << casez_tmp_20)
    & (head[3] ^ tail[3]
         ? tail[2:0] + 3'h2 >= head[2:0] | tail[2:0] + 3'h2 < tail[2:0]
         : tail[2:0] + 3'h2 >= head[2:0] & tail[2:0] + 3'h2 < tail[2:0]);
  always_comb begin
    casez (tail[2:0] + 3'h1)
      3'b000:
        casez_tmp_22 = sb_0_addr;
      3'b001:
        casez_tmp_22 = sb_1_addr;
      3'b010:
        casez_tmp_22 = sb_2_addr;
      3'b011:
        casez_tmp_22 = sb_3_addr;
      3'b100:
        casez_tmp_22 = sb_4_addr;
      3'b101:
        casez_tmp_22 = sb_5_addr;
      3'b110:
        casez_tmp_22 = sb_6_addr;
      default:
        casez_tmp_22 = sb_7_addr;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] + 3'h1)
      3'b000:
        casez_tmp_23 = sb_0_wlen;
      3'b001:
        casez_tmp_23 = sb_1_wlen;
      3'b010:
        casez_tmp_23 = sb_2_wlen;
      3'b011:
        casez_tmp_23 = sb_3_wlen;
      3'b100:
        casez_tmp_23 = sb_4_wlen;
      3'b101:
        casez_tmp_23 = sb_5_wlen;
      3'b110:
        casez_tmp_23 = sb_6_wlen;
      default:
        casez_tmp_23 = sb_7_wlen;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] + 3'h1)
      3'b000:
        casez_tmp_24 = sb_0_addr;
      3'b001:
        casez_tmp_24 = sb_1_addr;
      3'b010:
        casez_tmp_24 = sb_2_addr;
      3'b011:
        casez_tmp_24 = sb_3_addr;
      3'b100:
        casez_tmp_24 = sb_4_addr;
      3'b101:
        casez_tmp_24 = sb_5_addr;
      3'b110:
        casez_tmp_24 = sb_6_addr;
      default:
        casez_tmp_24 = sb_7_addr;
    endcase
  end // always_comb
  wire        ld_hit_7 =
    casez_tmp_22 <= io_addr_ex & _GEN < {7'h0, casez_tmp_24} + (39'h1 << casez_tmp_23)
    & (head[3] ^ tail[3]
         ? tail[2:0] + 3'h1 >= head[2:0] | tail[2:0] + 3'h1 < tail[2:0]
         : tail[2:0] + 3'h1 >= head[2:0] & tail[2:0] + 3'h1 < tail[2:0]);
  always_comb begin
    casez (tail[2:0])
      3'b000:
        casez_tmp_25 = sb_0_data;
      3'b001:
        casez_tmp_25 = sb_1_data;
      3'b010:
        casez_tmp_25 = sb_2_data;
      3'b011:
        casez_tmp_25 = sb_3_data;
      3'b100:
        casez_tmp_25 = sb_4_data;
      3'b101:
        casez_tmp_25 = sb_5_data;
      3'b110:
        casez_tmp_25 = sb_6_data;
      default:
        casez_tmp_25 = sb_7_data;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] - 3'h1)
      3'b000:
        casez_tmp_26 = sb_0_data;
      3'b001:
        casez_tmp_26 = sb_1_data;
      3'b010:
        casez_tmp_26 = sb_2_data;
      3'b011:
        casez_tmp_26 = sb_3_data;
      3'b100:
        casez_tmp_26 = sb_4_data;
      3'b101:
        casez_tmp_26 = sb_5_data;
      3'b110:
        casez_tmp_26 = sb_6_data;
      default:
        casez_tmp_26 = sb_7_data;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] - 3'h2)
      3'b000:
        casez_tmp_27 = sb_0_data;
      3'b001:
        casez_tmp_27 = sb_1_data;
      3'b010:
        casez_tmp_27 = sb_2_data;
      3'b011:
        casez_tmp_27 = sb_3_data;
      3'b100:
        casez_tmp_27 = sb_4_data;
      3'b101:
        casez_tmp_27 = sb_5_data;
      3'b110:
        casez_tmp_27 = sb_6_data;
      default:
        casez_tmp_27 = sb_7_data;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] - 3'h3)
      3'b000:
        casez_tmp_28 = sb_0_data;
      3'b001:
        casez_tmp_28 = sb_1_data;
      3'b010:
        casez_tmp_28 = sb_2_data;
      3'b011:
        casez_tmp_28 = sb_3_data;
      3'b100:
        casez_tmp_28 = sb_4_data;
      3'b101:
        casez_tmp_28 = sb_5_data;
      3'b110:
        casez_tmp_28 = sb_6_data;
      default:
        casez_tmp_28 = sb_7_data;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] - 3'h4)
      3'b000:
        casez_tmp_29 = sb_0_data;
      3'b001:
        casez_tmp_29 = sb_1_data;
      3'b010:
        casez_tmp_29 = sb_2_data;
      3'b011:
        casez_tmp_29 = sb_3_data;
      3'b100:
        casez_tmp_29 = sb_4_data;
      3'b101:
        casez_tmp_29 = sb_5_data;
      3'b110:
        casez_tmp_29 = sb_6_data;
      default:
        casez_tmp_29 = sb_7_data;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] + 3'h3)
      3'b000:
        casez_tmp_30 = sb_0_data;
      3'b001:
        casez_tmp_30 = sb_1_data;
      3'b010:
        casez_tmp_30 = sb_2_data;
      3'b011:
        casez_tmp_30 = sb_3_data;
      3'b100:
        casez_tmp_30 = sb_4_data;
      3'b101:
        casez_tmp_30 = sb_5_data;
      3'b110:
        casez_tmp_30 = sb_6_data;
      default:
        casez_tmp_30 = sb_7_data;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] + 3'h2)
      3'b000:
        casez_tmp_31 = sb_0_data;
      3'b001:
        casez_tmp_31 = sb_1_data;
      3'b010:
        casez_tmp_31 = sb_2_data;
      3'b011:
        casez_tmp_31 = sb_3_data;
      3'b100:
        casez_tmp_31 = sb_4_data;
      3'b101:
        casez_tmp_31 = sb_5_data;
      3'b110:
        casez_tmp_31 = sb_6_data;
      default:
        casez_tmp_31 = sb_7_data;
    endcase
  end // always_comb
  always_comb begin
    casez (tail[2:0] + 3'h1)
      3'b000:
        casez_tmp_32 = sb_0_data;
      3'b001:
        casez_tmp_32 = sb_1_data;
      3'b010:
        casez_tmp_32 = sb_2_data;
      3'b011:
        casez_tmp_32 = sb_3_data;
      3'b100:
        casez_tmp_32 = sb_4_data;
      3'b101:
        casez_tmp_32 = sb_5_data;
      3'b110:
        casez_tmp_32 = sb_6_data;
      default:
        casez_tmp_32 = sb_7_data;
    endcase
  end // always_comb
  wire [6:0]  ld_hit_index_enc =
    ld_hit_0
      ? 7'h0
      : ld_hit_1
          ? 7'h1
          : ld_hit_2
              ? 7'h2
              : ld_hit_3
                  ? 7'h4
                  : ld_hit_4
                      ? 7'h8
                      : ld_hit_5 ? 7'h10 : ld_hit_6 ? 7'h20 : {ld_hit_7, 6'h0};
  wire [2:0]  _io_ld_data_ex_T_2 = ld_hit_index_enc[6:4] | ld_hit_index_enc[2:0];
  always_comb begin
    casez ({|(ld_hit_index_enc[6:3]),
            |(_io_ld_data_ex_T_2[2:1]),
            _io_ld_data_ex_T_2[2] | _io_ld_data_ex_T_2[0]})
      3'b000:
        casez_tmp_33 = casez_tmp_25;
      3'b001:
        casez_tmp_33 = casez_tmp_26;
      3'b010:
        casez_tmp_33 = casez_tmp_27;
      3'b011:
        casez_tmp_33 = casez_tmp_28;
      3'b100:
        casez_tmp_33 = casez_tmp_29;
      3'b101:
        casez_tmp_33 = casez_tmp_30;
      3'b110:
        casez_tmp_33 = casez_tmp_31;
      default:
        casez_tmp_33 = casez_tmp_32;
    endcase
  end // always_comb
  wire        st_addr_ex_valid = io_is_store_ex & ~full;
  wire        _GEN_0 = ~io_flush & st_addr_ex_valid;
  wire        _elem_num_T = io_flush | flush_buf;
  wire [3:0]  _GEN_1 = {3'h0, ~full & st_addr_ex_valid};
  always @(posedge clock) begin
    if (reset) begin
      sb_0_addr <= 32'h0;
      sb_0_data <= 32'h0;
      sb_0_wlen <= 3'h0;
      sb_1_addr <= 32'h0;
      sb_1_data <= 32'h0;
      sb_1_wlen <= 3'h0;
      sb_2_addr <= 32'h0;
      sb_2_data <= 32'h0;
      sb_2_wlen <= 3'h0;
      sb_3_addr <= 32'h0;
      sb_3_data <= 32'h0;
      sb_3_wlen <= 3'h0;
      sb_4_addr <= 32'h0;
      sb_4_data <= 32'h0;
      sb_4_wlen <= 3'h0;
      sb_5_addr <= 32'h0;
      sb_5_data <= 32'h0;
      sb_5_wlen <= 3'h0;
      sb_6_addr <= 32'h0;
      sb_6_data <= 32'h0;
      sb_6_wlen <= 3'h0;
      sb_7_addr <= 32'h0;
      sb_7_data <= 32'h0;
      sb_7_wlen <= 3'h0;
      head <= 4'h0;
      tail <= 4'h0;
      elem_num <= 4'h0;
      flush_buf <= 1'h0;
      wait_to_cmt <= 3'h0;
    end
    else begin
      if (_GEN_0 & tail[2:0] == 3'h0) begin
        sb_0_addr <= io_addr_ex;
        sb_0_data <= io_st_data_ex;
        sb_0_wlen <= io_st_wlen_ex;
      end
      if (_GEN_0 & tail[2:0] == 3'h1) begin
        sb_1_addr <= io_addr_ex;
        sb_1_data <= io_st_data_ex;
        sb_1_wlen <= io_st_wlen_ex;
      end
      if (_GEN_0 & tail[2:0] == 3'h2) begin
        sb_2_addr <= io_addr_ex;
        sb_2_data <= io_st_data_ex;
        sb_2_wlen <= io_st_wlen_ex;
      end
      if (_GEN_0 & tail[2:0] == 3'h3) begin
        sb_3_addr <= io_addr_ex;
        sb_3_data <= io_st_data_ex;
        sb_3_wlen <= io_st_wlen_ex;
      end
      if (_GEN_0 & tail[2:0] == 3'h4) begin
        sb_4_addr <= io_addr_ex;
        sb_4_data <= io_st_data_ex;
        sb_4_wlen <= io_st_wlen_ex;
      end
      if (_GEN_0 & tail[2:0] == 3'h5) begin
        sb_5_addr <= io_addr_ex;
        sb_5_data <= io_st_data_ex;
        sb_5_wlen <= io_st_wlen_ex;
      end
      if (_GEN_0 & tail[2:0] == 3'h6) begin
        sb_6_addr <= io_addr_ex;
        sb_6_data <= io_st_data_ex;
        sb_6_wlen <= io_st_wlen_ex;
      end
      if (_GEN_0 & (&(tail[2:0]))) begin
        sb_7_addr <= io_addr_ex;
        sb_7_data <= io_st_data_ex;
        sb_7_wlen <= io_st_wlen_ex;
      end
      if (_elem_num_T & ~(|wait_to_cmt))
        head <= 4'h0;
      else
        head <= head + {3'h0, (|wait_to_cmt) | (|io_is_store_num_cmt)};
      if (io_flush)
        tail <= 4'h0;
      else
        tail <= tail + _GEN_1;
      if (_elem_num_T & ~(|wait_to_cmt))
        elem_num <= 4'h0;
      else
        elem_num <= elem_num - {3'h0, _io_is_store_cmt_output} + _GEN_1;
      flush_buf <=
        io_flush & (io_is_store_num_cmt[1] | (|wait_to_cmt)) | (|wait_to_cmt) & flush_buf;
      if (|io_is_store_num_cmt)
        wait_to_cmt <= wait_to_cmt + {1'h0, io_is_store_num_cmt} - 3'h1;
      else if (_io_is_store_cmt_output)
        wait_to_cmt <= wait_to_cmt - 3'h1;
    end
  end // always @(posedge)
  assign io_full = full;
  assign io_is_store_cmt = _io_is_store_cmt_output;
  assign io_st_addr_cmt = casez_tmp;
  assign io_st_data_cmt = casez_tmp_0;
  assign io_st_wlen_cmt = casez_tmp_1;
  assign io_ld_data_ex = casez_tmp_33;
  assign io_ld_hit =
    ld_hit_0 | ld_hit_1 | ld_hit_2 | ld_hit_3 | ld_hit_4 | ld_hit_5 | ld_hit_6 | ld_hit_7;
endmodule

