// Generated by CIRCT firtool-1.56.1
module ALU(
  input  [31:0] io_src1,
                io_src2,
  input  [3:0]  io_alu_op,
  output [31:0] io_alu_out
);

  reg  [31:0] casez_tmp;
  wire [62:0] _alu_out_T_16 = {31'h0, io_src1} << io_src2[4:0];
  always_comb begin
    casez (io_alu_op)
      4'b0000:
        casez_tmp = io_src1 + io_src2;
      4'b0001:
        casez_tmp = io_src1 - io_src2;
      4'b0010:
        casez_tmp = {31'h0, $signed(io_src1) < $signed(io_src2)};
      4'b0011:
        casez_tmp = {31'h0, io_src1 < io_src2};
      4'b0100:
        casez_tmp = ~(io_src1 | io_src2);
      4'b0101:
        casez_tmp = io_src1 & io_src2;
      4'b0110:
        casez_tmp = io_src1 | io_src2;
      4'b0111:
        casez_tmp = io_src1 ^ io_src2;
      4'b1000:
        casez_tmp = _alu_out_T_16[31:0];
      4'b1001:
        casez_tmp = io_src1 >> io_src2[4:0];
      4'b1010:
        casez_tmp = $signed($signed(io_src1) >>> io_src2[4:0]);
      4'b1011:
        casez_tmp = 32'h0;
      4'b1100:
        casez_tmp = 32'h0;
      4'b1101:
        casez_tmp = 32'h0;
      4'b1110:
        casez_tmp = 32'h0;
      default:
        casez_tmp = 32'h0;
    endcase
  end // always_comb
  assign io_alu_out = casez_tmp;
endmodule

