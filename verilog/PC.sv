// Generated by CIRCT firtool-1.58.0
module PC(
  input         clock,
                reset,
  output [31:0] io_pc_IF,
  input         io_pc_stall,
                io_predict_fail,
  output [31:0] io_npc,
  input         io_pred_jump_0,
                io_pred_jump_1,
                io_pred_jump_2,
                io_pred_jump_3,
  input  [31:0] io_pred_npc,
                io_branch_target,
  output        io_inst_valid_IF_0,
                io_inst_valid_IF_1,
                io_inst_valid_IF_2,
                io_inst_valid_IF_3,
  input         io_flush_by_pd,
  input  [31:0] io_flush_pd_target
);

  reg  [31:0] pc;
  wire        _GEN = io_pred_jump_0 | io_pred_jump_1 | io_pred_jump_2 | io_pred_jump_3;
  wire [31:0] _io_npc_T = 32'(pc + 32'h10);
  wire [31:0] _io_npc_T_3 = {_io_npc_T[31:4], 4'h0};
  wire [3:0]  _GEN_0 =
    4'({io_pred_jump_0 ? 3'h1 : io_pred_jump_1 ? 3'h2 : {io_pred_jump_2, 2'h0}, 1'h0}
       - 4'h1);
  wire [3:0]  _GEN_1 = 4'hF >> pc[3:2];
  always @(posedge clock) begin
    if (reset)
      pc <= 32'h1C000000;
    else if (io_predict_fail)
      pc <= io_branch_target;
    else if (io_flush_by_pd)
      pc <= io_flush_pd_target;
    else if (io_pc_stall) begin
    end
    else if (_GEN)
      pc <= io_pred_npc;
    else
      pc <= _io_npc_T_3;
  end // always @(posedge)
  assign io_pc_IF = pc;
  assign io_npc =
    io_predict_fail
      ? io_branch_target
      : io_flush_by_pd
          ? io_flush_pd_target
          : io_pc_stall ? pc : _GEN ? io_pred_npc : _io_npc_T_3;
  assign io_inst_valid_IF_0 = _GEN_0[0] & _GEN_1[0];
  assign io_inst_valid_IF_1 = _GEN_0[1] & _GEN_1[1];
  assign io_inst_valid_IF_2 = _GEN_0[2] & _GEN_1[2];
  assign io_inst_valid_IF_3 = _GEN_0[3] & _GEN_1[3];
endmodule

