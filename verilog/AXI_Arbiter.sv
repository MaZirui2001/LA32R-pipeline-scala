// Generated by CIRCT firtool-1.58.0
module AXI_Arbiter(
  input         clock,
                reset,
  input  [31:0] io_i_araddr,
  input         io_i_rvalid,
  output        io_i_rready,
  output [31:0] io_i_rdata,
  output        io_i_rlast,
  output [31:0] io_araddr,
  output [1:0]  io_arburst,
  output [7:0]  io_arlen,
  input         io_arready,
  output [2:0]  io_arsize,
  output        io_arvalid,
  input         io_awready,
  output        io_awvalid,
                io_bready,
  input         io_bvalid,
  input  [31:0] io_rdata,
  input         io_rlast,
  output        io_rready,
  input         io_rvalid
);

  wire       _GEN;
  reg  [1:0] casez_tmp;
  reg  [2:0] r_state;
  wire       _GEN_0 = r_state == 3'h0;
  wire       _GEN_1 = r_state == 3'h1;
  wire       _GEN_2 = r_state == 3'h2;
  wire       _GEN_3 = _GEN_0 | _GEN_1;
  wire       _GEN_4 = r_state == 3'h3;
  wire       _GEN_5 = _GEN_0 | _GEN_1 | _GEN_2;
  reg  [1:0] w_state;
  wire       _GEN_6 = w_state == 2'h0;
  wire       _GEN_7 = w_state == 2'h1;
  wire       _GEN_8 = _GEN_6 | _GEN_7 | w_state == 2'h2;
  wire       _io_bready_output = ~_GEN_8 & (&w_state) & _GEN & io_bvalid;
  assign _GEN = ~_GEN_8;
  always_comb begin
    casez (w_state)
      2'b00:
        casez_tmp = 2'h0;
      2'b01:
        casez_tmp = io_awready ? 2'h2 : 2'h1;
      2'b10:
        casez_tmp = 2'h2;
      default:
        casez_tmp = _io_bready_output & io_bvalid ? 2'h0 : 2'h3;
    endcase
  end // always_comb
  always @(posedge clock) begin
    if (reset) begin
      r_state <= 3'h0;
      w_state <= 2'h0;
    end
    else begin
      if (_GEN_0)
        r_state <= {2'h0, io_i_rvalid};
      else if (_GEN_1)
        r_state <= io_arready ? 3'h2 : 3'h1;
      else if (_GEN_2)
        r_state <= {1'h0, ~(io_i_rvalid & io_rlast), 1'h0};
      else if (_GEN_4)
        r_state <= io_arready ? 3'h4 : 3'h3;
      w_state <= casez_tmp;
    end
  end // always @(posedge)
  assign io_i_rready = ~_GEN_3 & _GEN_2 & io_rvalid;
  assign io_i_rdata = io_rdata;
  assign io_i_rlast = ~_GEN_3 & _GEN_2 & io_rlast;
  assign io_araddr = _GEN_5 | ~_GEN_4 ? io_i_araddr : 32'h0;
  assign io_arburst = _GEN_5 ? 2'h1 : {1'h0, ~_GEN_4};
  assign io_arlen = _GEN_5 ? 8'h1 : {7'h0, ~_GEN_4};
  assign io_arsize = _GEN_5 ? 3'h2 : {1'h0, ~_GEN_4, 1'h0};
  assign io_arvalid = ~_GEN_0 & (_GEN_1 | ~_GEN_2 & _GEN_4);
  assign io_awvalid = ~_GEN_6 & _GEN_7;
  assign io_bready = _io_bready_output;
  assign io_rready = ~_GEN_3 & _GEN_2 & io_i_rvalid;
endmodule

